type Question {
  label: String
  answer: Boolean
}

type Questionaire {
  id: ID!
  name: String!
  questions: [Question]
  owner: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input QuestionInput {
  label: String
  answer: Boolean
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelQuestionaireConnection {
  items: [Questionaire]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelQuestionaireFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  owner: ModelStringInput
  and: [ModelQuestionaireFilterInput]
  or: [ModelQuestionaireFilterInput]
  not: ModelQuestionaireFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getQuestionaire(id: ID!): Questionaire
  listQuestionaires(filter: ModelQuestionaireFilterInput, limit: Int, nextToken: String): ModelQuestionaireConnection
}

input CreateQuestionaireInput {
  id: ID
  name: String!
  questions: [QuestionInput]
  owner: String!
}

input UpdateQuestionaireInput {
  id: ID!
  name: String
  questions: [QuestionInput]
  owner: String
}

input DeleteQuestionaireInput {
  id: ID
}

type Mutation {
  createQuestionaire(input: CreateQuestionaireInput!, condition: ModelQuestionaireConditionInput): Questionaire
  updateQuestionaire(input: UpdateQuestionaireInput!, condition: ModelQuestionaireConditionInput): Questionaire
  deleteQuestionaire(input: DeleteQuestionaireInput!, condition: ModelQuestionaireConditionInput): Questionaire
}

input ModelQuestionaireConditionInput {
  name: ModelStringInput
  owner: ModelStringInput
  and: [ModelQuestionaireConditionInput]
  or: [ModelQuestionaireConditionInput]
  not: ModelQuestionaireConditionInput
}

type Subscription {
  onCreateQuestionaire: Questionaire @aws_subscribe(mutations: ["createQuestionaire"])
  onUpdateQuestionaire: Questionaire @aws_subscribe(mutations: ["updateQuestionaire"])
  onDeleteQuestionaire: Questionaire @aws_subscribe(mutations: ["deleteQuestionaire"])
}
